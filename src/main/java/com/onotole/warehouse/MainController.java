package com.onotole.warehouse;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private WeaponRepository weaponRepository;

    @GetMapping(path = "/weapons")
    public @ResponseBody Iterable<Weapon> getAllWeapons() {
        // This returns a JSON or XML with the users
        return weaponRepository.findAll();
    }

    @GetMapping(path = "/weapons/{id}")
    public ResponseEntity<Weapon> getWeapon(@PathVariable int id) {
        // This returns a JSON or XML with the users
        Optional<Weapon> optionalWeapon = weaponRepository.findById(id);
        if (optionalWeapon.isPresent()) {
            return new ResponseEntity<>(optionalWeapon.get(), HttpStatus.OK);
        }
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }

    @PostMapping(path = "/weapons") // Map ONLY POST Requests
    public @ResponseBody String addWeapon(@RequestParam String name, @RequestParam String type) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Weapon weapon = new Weapon();
        weapon.setName(name);
        weapon.setType(type);
        weaponRepository.save(weapon);
        return "Saved";
    }

    @PutMapping("/weapons/{id}")
    public @ResponseBody String updateWeapon(@RequestParam String name, @RequestParam String type,
            @PathVariable int id) {

        return weaponRepository.findById(id)
                .map(weapon -> {
                    weapon.setName(name);
                    weapon.setType(type);
                    weaponRepository.save(weapon);
                    return "Updated";
                }).orElseThrow();
    }

    @DeleteMapping("/weapons/{id}")
    public @ResponseBody String deleteWeapon(@PathVariable int id) {
        weaponRepository.deleteById(id);
        return "Deleted";
    }

}
